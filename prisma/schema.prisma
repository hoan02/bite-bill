generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  name          String
  email         String          @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Bill          Bill[]          @relation("CreatedBills")
  BillItemShare BillItemShare[]
  Deposit       Deposit[]

  role        String?
  banned      Boolean?
  banReason   String?
  banExpires  DateTime?
  members     Member[]
  invitations Invitation[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String?
  activeOrganizationId String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?      @unique
  logo        String?
  joinCode    String       @unique
  createdAt   DateTime     @default(now())
  metadata    String?
  members     Member[]
  invitations Invitation[]
  bills       Bill[]
  deposits    Deposit[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  @@unique([userId, organizationId])
  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Bill {
  id             String   @id @default(uuid())
  organizationId String
  title          String
  description    String?
  totalAmount    Int
  imageUrl       String?
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization  Organization @relation(fields: [organizationId], references: [id])
  createdByUser User         @relation("CreatedBills", fields: [createdById], references: [id])
  items         BillItem[]

  @@index([organizationId])
  @@map("bill")
}

model BillItem {
  id        String @id @default(uuid())
  billId    String
  name      String
  quantity  Int
  unitPrice Int
  total     Int    @default(0)

  bill   Bill            @relation(fields: [billId], references: [id])
  shares BillItemShare[]

  @@map("bill_item")
}

model BillItemShare {
  id     String @id @default(uuid())
  itemId String
  userId String
  amount Int

  item BillItem @relation(fields: [itemId], references: [id])
  user User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("bill_item_share")
}

model Deposit {
  id             String   @id @default(uuid())
  organizationId String
  userId         String
  amount         Int
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@map("deposit")
}
