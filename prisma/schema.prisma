generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  name          String
  email         String          @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  GroupMember   GroupMember[]
  Bill          Bill[]          @relation("CreatedBills")
  BillItemShare BillItemShare[]
  Deposit       Deposit[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Group {
  id          String        @id @default(uuid())
  ownerId     String
  name        String
  description String?
  joinKey     String        @unique @db.VarChar(16)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  bills       Bill[]        @relation("GroupBills")
  Deposit     Deposit[]

  @@map("group")
}

model GroupMember {
  id       String    @id @default(uuid())
  userId   String
  groupId  String
  role     GroupRole
  deposit  Int       @default(0)
  joinedAt DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("group_member")
}

enum GroupRole {
  OWNER
  EXPENSE_EDITOR
  MEMBER
}

model Bill {
  id          String   @id @default(uuid())
  groupId     String
  title       String
  description String?
  totalAmount Int
  imageUrl    String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group         Group      @relation("GroupBills", fields: [groupId], references: [id])
  createdByUser User       @relation("CreatedBills", fields: [createdById], references: [id])
  items         BillItem[]

  @@index([groupId])
  @@index([createdById])
  @@map("bill")
}

model BillItem {
  id        String          @id @default(uuid())
  billId    String
  name      String
  quantity  Int
  unitPrice Int
  total     Int             @default(0)
  bill      Bill            @relation(fields: [billId], references: [id])
  shares    BillItemShare[]

  @@map("bill_item")
}

model BillItemShare {
  id     String @id @default(uuid())
  itemId String
  userId String
  amount Int

  item BillItem @relation(fields: [itemId], references: [id])
  user User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("bill_item_share")
}

model Deposit {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  amount    Int
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
  @@map("deposit")
}
